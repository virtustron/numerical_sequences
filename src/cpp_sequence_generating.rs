/* automatically generated by rust-bindgen 0.59.1 */

extern "C" {
    #[link_name = "\u{1}_Z35InitializeNaturalSequenceParametersPPvj"]
    pub fn InitializeNaturalSequenceParameters(
        parameters_container_to_initialize: *mut *mut ::std::os::raw::c_void,
        upper_bound: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z23GenerateNaturalSequencePvPS_"]
    pub fn GenerateNaturalSequence(
        parameters_container: *mut ::std::os::raw::c_void,
        generated_sequence_container: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z37InitializeFibonacciSequenceParametersPPvjj"]
    pub fn InitializeFibonacciSequenceParameters(
        parameters_container_to_initialize: *mut *mut ::std::os::raw::c_void,
        lower_bound: ::std::os::raw::c_uint,
        upper_bound: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z25GenerateFibonacciSequencePvPS_"]
    pub fn GenerateFibonacciSequence(
        parameters_container: *mut ::std::os::raw::c_void,
        generated_sequence_container: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const GENERATING_SUCCEDED: ::std::os::raw::c_int = 0;
pub const GENERATING_FAILED: ::std::os::raw::c_int = -1;
pub const GENERATING_PARAMETERS_ARE_NOT_VALID: ::std::os::raw::c_int = -2;
#[repr(C)]
#[derive(Debug)]
pub struct GeneratedContainer {
    pub m_elements_count: ::std::os::raw::c_int,
    pub m_elements: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GeneratedContainer() {
    assert_eq!(
        ::std::mem::size_of::<GeneratedContainer>(),
        16usize,
        concat!("Size of: ", stringify!(GeneratedContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<GeneratedContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(GeneratedContainer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GeneratedContainer>())).m_elements_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GeneratedContainer),
            "::",
            stringify!(m_elements_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GeneratedContainer>())).m_elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GeneratedContainer),
            "::",
            stringify!(m_elements)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainer18get_elements_countEv"]
    pub fn GeneratedContainer_get_elements_count(
        this: *mut GeneratedContainer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainer12get_elementsEv"]
    pub fn GeneratedContainer_get_elements(
        this: *mut GeneratedContainer,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainer12set_elementsEPji"]
    pub fn GeneratedContainer_set_elements(
        this: *mut GeneratedContainer,
        elements: *mut ::std::os::raw::c_uint,
        elements_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainerC1Ev"]
    pub fn GeneratedContainer_GeneratedContainer(this: *mut GeneratedContainer);
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainerC1EPji"]
    pub fn GeneratedContainer_GeneratedContainer1(
        this: *mut GeneratedContainer,
        elements: *mut ::std::os::raw::c_uint,
        elements_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18GeneratedContainerD1Ev"]
    pub fn GeneratedContainer_GeneratedContainer_destructor(this: *mut GeneratedContainer);
}
impl GeneratedContainer {
    #[inline]
    pub unsafe fn get_elements_count(&mut self) -> ::std::os::raw::c_int {
        GeneratedContainer_get_elements_count(self)
    }
    #[inline]
    pub unsafe fn get_elements(&mut self) -> *mut ::std::os::raw::c_uint {
        GeneratedContainer_get_elements(self)
    }
    #[inline]
    pub unsafe fn set_elements(
        &mut self,
        elements: *mut ::std::os::raw::c_uint,
        elements_count: ::std::os::raw::c_int,
    ) {
        GeneratedContainer_set_elements(self, elements, elements_count)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GeneratedContainer_GeneratedContainer(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        elements: *mut ::std::os::raw::c_uint,
        elements_count: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GeneratedContainer_GeneratedContainer1(
            __bindgen_tmp.as_mut_ptr(),
            elements,
            elements_count,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GeneratedContainer_GeneratedContainer_destructor(self)
    }
}
pub const INIT_SUCCEDED: ::std::os::raw::c_int = 0;
pub const INIT_INVALID_BOUND: ::std::os::raw::c_int = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParametersContainer {
    pub m_lower_bound: ::std::os::raw::c_uint,
    pub m_upper_bound: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ParametersContainer() {
    assert_eq!(
        ::std::mem::size_of::<ParametersContainer>(),
        8usize,
        concat!("Size of: ", stringify!(ParametersContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<ParametersContainer>(),
        4usize,
        concat!("Alignment of ", stringify!(ParametersContainer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParametersContainer>())).m_lower_bound as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParametersContainer),
            "::",
            stringify!(m_lower_bound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParametersContainer>())).m_upper_bound as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ParametersContainer),
            "::",
            stringify!(m_upper_bound)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19ParametersContainer15get_lower_boundEv"]
    pub fn ParametersContainer_get_lower_bound(
        this: *mut ParametersContainer,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN19ParametersContainer15get_upper_boundEv"]
    pub fn ParametersContainer_get_upper_bound(
        this: *mut ParametersContainer,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN19ParametersContainerC1Ejj"]
    pub fn ParametersContainer_ParametersContainer(
        this: *mut ParametersContainer,
        lower_bound: ::std::os::raw::c_uint,
        upper_bound: ::std::os::raw::c_uint,
    );
}
impl ParametersContainer {
    #[inline]
    pub unsafe fn get_lower_bound(&mut self) -> ::std::os::raw::c_uint {
        ParametersContainer_get_lower_bound(self)
    }
    #[inline]
    pub unsafe fn get_upper_bound(&mut self) -> ::std::os::raw::c_uint {
        ParametersContainer_get_upper_bound(self)
    }
    #[inline]
    pub unsafe fn new(
        lower_bound: ::std::os::raw::c_uint,
        upper_bound: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ParametersContainer_ParametersContainer(
            __bindgen_tmp.as_mut_ptr(),
            lower_bound,
            upper_bound,
        );
        __bindgen_tmp.assume_init()
    }
}
